- name: Install kubectl
  gather_facts: true
  collections:
    - community.general
  hosts: "{{ host_group }}"
  
  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    playbook_file_path: "{{ (lookup('file', '/proc/self/cmdline') | regex_replace('\u0000',' ')).split() | select('match','^.*[.]ya?ml$') | list | first }}"
    playbook_file_name: "{{ playbook_file_path | basename }}"

  tasks:

  - name: Check if Kubectl is installed
    shell: |
      kubectl version --client
    register: kubectl_installed
    ignore_errors: yes

  - name: Print Kubectl version if installed
    debug:
      msg: "Kubectl {{ kubectl_installed.stdout }} version is already installed."
    when: kubectl_installed.rc == 0

  - name: Install required packages for kubectl
    become: yes
    become_user: root
    apt:
      name:
        - software-properties-common
        - apt-transport-https
        - ca-certificates
        - curl
      state: present
    when: kubectl_installed.rc != 0 and ansible_os_family == "Debian"

  - name: Download Kubernetes APT gpg keys
    become: yes
    become_user: root
    apt_key:
      url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
      state: present
    when: kubectl_installed.rc != 0 and ansible_os_family == "Debian"

  - name: Add Kubernetes APT repository
    become: yes
    become_user: root
    apt_repository:
      repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
      state: present
    when: kubectl_installed.rc != 0 and ansible_os_family == "Debian"

  - name: Update apt cache and upgrade packages (for Debian/Ubuntu)
    become: yes
    become_user: root
    apt:
      update_cache: yes
      upgrade: dist
      autoremove: yes
      autoclean: yes
    when: kubectl_installed.rc != 0 and ansible_os_family == "Debian"

  - name: Install Kubernetes components
    become: yes
    become_user: root
    apt:
      name: 
        - kubectl
    when: kubectl_installed.rc != 0 and ansible_os_family == "Debian"

  - name: Wait for kubectl installation to finish
    shell: |
      kubectl version --client
    register: kubectl_new_installed
    until: kubectl_new_installed.rc == 0
    retries: 60  # Adjust the number of retries as needed
    delay: 5     # Delay between retries
    when: kubectl_installed.rc != 0