- name: Create kops cluster
  gather_facts: true
  hosts: "{{ host_group }}"

  environment:
      AWS_PAGER: ""
      AWS_PROFILE: "{{ AWS_PROFILE }}"  # Set your desired AWS profile here
      KOPS_CLUSTER_NAME: "{{ KOPS_CLUSTER_NAME }}"
      KOPS_STATE_STORE: "{{ KOPS_STATE_S3 }}"

  tasks:

    - name: Check if S3 Bucket kops state directory exists
      shell: |
        output=$(aws s3api list-objects --bucket "{{ KOPS_STATE_S3_BUCKET }}" --prefix "{{ KOPS_STATE_S3_DIR }}")
        request_charged=$(echo "$output" | jq -r '.RequestCharged')
        if [ "$request_charged" == "null" ]; then
          echo "not_null"
        else
          echo "null"
        fi
      ignore_errors: yes
      register: s3_object_status
  
    - name: Create S3 Bucket directory for kops state
      shell: |
        aws s3api put-object --bucket "{{ KOPS_STATE_S3_BUCKET }}" --key "{{ KOPS_STATE_S3_DIR }}/"
      when: s3_object_status.rc != 0 or s3_object_status.stdout == "not_null"

    - name: Add export statement for AWS_PAGER to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export AWS_PAGER=""'
        state: present

    - name: Add export statement for AWS_PROFILE to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export AWS_PROFILE={{ AWS_PROFILE }}'
        state: present

    - name: Add export statement for KOPS_CLUSTER_NAME to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export KOPS_CLUSTER_NAME={{ KOPS_CLUSTER_NAME }}'
        state: present

    - name: Add export statement for KOPS_STATE_STORE to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export KOPS_STATE_STORE={{ KOPS_STATE_S3 }}'
        state: present

    - name: Check cluster existence
      shell: |
        kops get cluster "{{ KOPS_CLUSTER_NAME }}"
      register: cluster_exists
      ignore_errors: true
      changed_when: false

    - name: Set cluster exists fact
      set_fact:
        cluster_exists: "{{ cluster_exists.rc == 0 }}"

    - name: Create kubernetes cluster configuration file with template
      shell: |
        python3 "{{ KOPS_DIR }}/{{ KOPS_TPL_RENDERER_PY_FILE_NAME }}" \
                "{{ KOPS_DIR }}/{{ KOPS_TPL_J2_FILE_NAME }}" \
                "{{ KOPS_DIR }}/{{ KOPS_TPL_VALUE_JSON_FILE_NAME }}" \
                "{{ KOPS_DIR }}/{{ KOPS_CONF_YAML_FILE_NAME }}"

    - name: Create kubernetes cluster configuration file to s3 bucket
      shell: |
        kops create -f {{ KOPS_DIR }}/{{ KOPS_CONF_YAML_FILE_NAME }}
      when: not cluster_exists|default(false)

    - name: Create kubernetes cluster
      shell: |
        kops update cluster --yes
      when: not cluster_exists|default(false)

    - name: Set kubernetes admin
      shell: |
        kops export kubeconfig --admin
      when: not cluster_exists|default(false)

    - name: Update kubernetes cluster
      shell: |
        kops rolling-update cluster --yes
        kops rolling-update cluster --target {{ KOPS_CONF_YAML_FILE }} --yes --cloudonly
      when: cluster_exists|default(false)

    - name: Validate kubernetes cluster
      shell: |
        kops validate cluster
      register: validate_result
      until: validate_result.rc == 0  # Exit loop if return code is 0 (success)
      retries: 30  # Retry 15 times (up to 15 minutes)
      delay: 60    # Wait 1 minute between retries