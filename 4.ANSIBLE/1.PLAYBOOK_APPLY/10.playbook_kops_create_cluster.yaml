- name: Create kops cluster
  gather_facts: true
  hosts: "{{ host_group }}"

  # environment:
  #     AWS_PAGER: ""
  #     AWS_PROFILE: "{{ AWS_PROFILE }}"  # Set your desired AWS profile here

  # vars:
  #   ansible_python_interpreter: "/usr/bin/python3"
  #   playbook_file_path: "{{ (lookup('file', '/proc/self/cmdline') | regex_replace('\u0000',' ')).split() | select('match','^.*[.]ya?ml$') | list | first }}"
  #   playbook_file_name: "{{ playbook_file_path | basename }}"

  tasks:

    - name: Check if S3 Bucket kops state directory exists
      shell: |
        output=$(aws s3api list-objects --bucket "{{ KOPS_STATE_S3_BUCKET }}" --prefix "{{ KOPS_STATE_S3_DIR }}" --profile "{{ AWS_PROFILE }}")
        request_charged=$(echo "$output" | jq -r '.RequestCharged')
        echo "$request_charged"
      ignore_errors: yes
      register: s3_object_status
  
    - name: Create S3 Bucket directory for kops state
      shell: |
        aws s3api put-object --bucket "{{ KOPS_STATE_S3_BUCKET }}" --key "{{ KOPS_STATE_S3_DIR }}/" --profile "{{ AWS_PROFILE }}"
      when: s3_object_status.rc != 0 or s3_object_status.rc == "null"

    - name: Add export statement for AWS_PAGER to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export AWS_PAGER=""'
        state: present

    - name: Add export statement for AWS_PROFILE to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export AWS_PROFILE={{ AWS_PROFILE }}'
        state: present

    - name: Add export statement for KOPS_CLUSTER_NAME to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export KOPS_CLUSTER_NAME={{ KOPS_CLUSTER_NAME }}'
        state: present

    - name: Add export statement for KOPS_STATE_STORE to ~/.bashrc
      lineinfile:
        dest: "/home/{{ ansible_user }}/.bashrc"
        line: 'export KOPS_STATE_STORE={{ KOPS_STATE_S3 }}'
        state: present

    - name: Check cluster existence
      shell: |
        kops get cluster "{{ KOPS_CLUSTER_NAME }}"
      register: cluster_exists
      ignore_errors: true
      changed_when: false

    - name: Set cluster exists fact
      set_fact:
        cluster_exists: "{{ cluster_exists.rc == 0 }}"

    # - name: Create Kubernetes cluster configuration file to local
    #   shell: |
    #     kops create cluster \
    #     --state {{ KOPS_STATE_S3 }} \
    #     --name {{ KOPS_CLUSTER_NAME }} \
    #     --kubernetes-version {{ KOPS_CLUSTER_VERSION }} \
    #     --container-runtime {{ KOPS_CLUSTER_CONTAINER_RUNTIME }} \
    #     --cloud {{ KOPS_CLUSTER_CLOUD }} \
    #     --authorization RBAC \
    #     --api-public-name {{ KOPS_CLUSTER_API_PUBLIC_NAME }} \
    #     --topology {{ KOPS_CLUSTER_TOPOLOGY }} \
    #     --networking {{ KOPS_CLUSTER_NETWORK }} \
    #     --network-id {{ KOPS_CLUSTER_NETWORK_ID }} \
    #     --api-loadbalancer-type {{ KOPS_CLUSTER_LB_TYPE }} \
    #     --api-loadbalancer-class {{ KOPS_CLUSTER_LB_CLASS }} \
    #     --zones "{{ KOPS_CLUSTER_ZONES }}" \
    #     --control-plane-zones "{{ KOPS_CLUSTER_MASTER_ZONES }}" \
    #     --master-size {{ KOPS_CLUSTER_MASTER_SIZE }} \
    #     --node-size {{ KOPS_CLUSTER_NODE_SIZE }} \
    #     --node-count {{ KOPS_CLUSTER_NODE_COUNT }} \
    #     --utility-subnets "{{ KOPS_CLUSTER_UTILITY_SUBNETS }}" \
    #     --subnets "{{ KOPS_CLUSTER_SUBNETS }}" \
    #     --admin-access {{ KOPS_CLUSTER_BASTION_CIDR }} \
    #     --ssh-public-key {{ KOPS_CLUSTER_SSH_PUBLIC_KEY_FILE }} \
    #     --dry-run \
    #     -oyaml > {{ KOPS_DIR }}/{{ KOPS_CLUSTER_NAME }}.yaml
    #   when: not cluster_exists|default(false)

    - name: Create kubernetes cluster configuration file to s3 bucket
      shell: |
        kops create -f {{ KOPS_CONF_YAML_FILE }} --state {{ KOPS_STATE_S3 }}
      when: not cluster_exists|default(false)

    - name: Create kubernetes cluster
      shell: |
        kops update cluster --name {{ KOPS_CLUSTER_NAME }} --state {{ KOPS_STATE_S3 }} --yes
      when: not cluster_exists|default(false)

    - name: Set kubernetes admin
      shell: |
        kops export kubeconfig --admin --name {{ KOPS_CLUSTER_NAME }} --state {{ KOPS_STATE_S3 }}
      when: not cluster_exists|default(false)

    - name: Update kubernetes cluster
      shell: |
        kops rolling-update cluster --name {{ KOPS_CLUSTER_NAME }} --state {{ KOPS_STATE_S3 }} --yes
        kops rolling-update cluster --name {{ KOPS_CLUSTER_NAME }} --state {{ KOPS_STATE_S3 }} --target {{ KOPS_CONF_YAML_FILE }} --yes --cloudonly
      when: cluster_exists|default(false)

    - name: Validate kubernetes cluster
      shell: |
        kops validate cluster --name {{ KOPS_CLUSTER_NAME }} --state {{ KOPS_STATE_S3 }}
      register: validate_result
      until: validate_result.rc == 0  # Exit loop if return code is 0 (success)
      retries: 30  # Retry 15 times (up to 15 minutes)
      delay: 60    # Wait 1 minute between retries